<div id="feedback-survey" class="w-full max-w-6xl mt-8 p-6 bg-white rounded-2xl shadow-md border border-gray-100">
  <!-- Section title -->
  <h2 class="text-2xl font-bold text-gray-800 mb-1">🍽️ Recipe Feedback</h2>

  <!-- Short description -->
  <p class="text-gray-600 mb-6">
    Let us know what you think of these recipes. Click 👍 or 👎 to give feedback.
    <span class="font-medium text-blue-600">You need to be signed in to submit feedback.</span>
  </p>

  <!-- Cards will be injected by JS -->
  <div id="recipe-cards" class="flex flex-row items-center justify-center gap-16">
    <!-- Cards will be rendered here -->
  </div>


</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
  $(function () {
    const $cards = $('#recipe-cards');
    let recipeQueue = [];

    function generateCardHtml(recipe, queueIndex) {
      return `
<div class="recipe-card flex flex-col border border-gray-200 rounded-xl shadow hover:shadow-md transition p-4"
     style="width: 280px;" data-id="${recipe.id}" data-queue-index="${queueIndex}">
  <h3 class="text-base font-semibold text-gray-800 mb-3 truncate" title="${recipe.name}">
    ${recipe.name}
  </h3>
  <div class="w-36 h-36 mb-4 overflow-hidden rounded-md flex-shrink-0 mx-auto cursor-pointer">
    <a href="/Cooking/Recipe/Details/${recipe.id}" aria-label="View details of ${recipe.name}">
      <img src="${recipe.coverImage}" alt="${recipe.name}" class="w-full h-full object-cover" />
    </a>
  </div>
  <div class="feedback-buttons flex gap-2 justify-center mt-auto">
    <button class="like-btn px-3 py-1 text-sm bg-green-100 text-green-700 rounded hover:bg-green-200 transition" type="button">👍 Like</button>
    <button class="dislike-btn px-3 py-1 text-sm bg-red-100 text-red-700 rounded hover:bg-red-200 transition" type="button">👎 Dislike</button>
    <button class="replace-btn px-3 py-1 text-sm bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition" type="button">❌ Replace</button>
  </div>
  <div class="feedback-result text-center mt-2 font-semibold"></div>
</div>`;
    }

    function renderCardAt(index) {
      const $oldCard = $cards.find(`.recipe-card[data-queue-index="${index}"]`);
      const recipe = recipeQueue[index];
      const newCardHtml = generateCardHtml(recipe, index);

      $oldCard.fadeOut(300, function () {
        $(this).replaceWith(newCardHtml);
        $cards.find(`.recipe-card[data-queue-index="${index}"]`).hide().fadeIn(300);
      });
    }

    function loadMoreRecipes(count = 5) {
      return $.get(`/api/suggestions?count=${count}`)
        .done(function (recipes) {
          recipeQueue.push(...recipes);
        })
        .fail(function () {
          console.error("Failed to load more recipes.");
        });
    }

    function replaceRecipeAt(index) {
      $.get('/api/suggestions?count=1')
        .done(function (recipes) {
          const newRecipe = recipes[0];
          recipeQueue[index] = newRecipe;
          renderCardAt(index);
        })
        .fail(function () {
          console.error("Failed to replace recipe.");
        });
    }

    // Like/Dislike
    $cards.on('click', '.like-btn, .dislike-btn', function () {
      const $card = $(this).closest('.recipe-card');
      const recipeId = $card.data('id');
      const queueIndex = parseInt($card.attr('data-queue-index'), 10);
      const isLike = $(this).hasClass('like-btn');
      const $result = $card.find('.feedback-result');

      $card.find('.feedback-buttons button')
        .prop('disabled', true)
        .attr('aria-disabled', 'true');

      $card.find('.feedback-buttons').fadeOut();
      $result
        .text(isLike ? 'You liked this recipe' : 'You disliked this recipe')
        .removeClass('text-green-600 text-red-600')
        .addClass(isLike ? 'text-green-600' : 'text-red-600');

      $.post('/api/suggestions', { recipeId, isLike })
        .fail(function (jqXHR, textStatus, errorThrown) {
          console.log(`Feedback submission failed: ${textStatus} - ${errorThrown}`);
        });

      setTimeout(() => replaceRecipeAt(queueIndex), 3000);
    });

    // ❌ Replace
    $cards.on('click', '.replace-btn', function () {
      const $card = $(this).closest('.recipe-card');
      const queueIndex = parseInt($card.attr('data-queue-index'), 10);
      replaceRecipeAt(queueIndex);
    });

    // Initial load
    loadMoreRecipes(6).then(() => {
      recipeQueue.slice(0, 3).forEach((recipe, i) => {
        $cards.append(generateCardHtml(recipe, i));
      });
    });
  });
</script>
