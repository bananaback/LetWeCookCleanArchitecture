// <auto-generated />
using System;
using LetWeCook.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LetWeCook.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(LetWeCookDbContext))]
    partial class LetWeCookDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LetWeCook.Domain.Aggregates.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<double?>("Calories")
                        .HasColumnType("float")
                        .HasColumnName("calories");

                    b.Property<double?>("Carbohydrates")
                        .HasColumnType("float")
                        .HasColumnName("carbohydrates");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoverImageUrlId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<double?>("ExpirationDays")
                        .HasColumnType("float")
                        .HasColumnName("expiration_days");

                    b.Property<double?>("Fat")
                        .HasColumnType("float")
                        .HasColumnName("fat");

                    b.Property<double?>("Fiber")
                        .HasColumnType("float")
                        .HasColumnName("fiber");

                    b.Property<bool>("IsGlutenFree")
                        .HasColumnType("bit")
                        .HasColumnName("is_gluten_free");

                    b.Property<bool>("IsPescatarian")
                        .HasColumnType("bit")
                        .HasColumnName("is_pescatarian");

                    b.Property<bool>("IsVegan")
                        .HasColumnType("bit")
                        .HasColumnName("is_vegan");

                    b.Property<bool>("IsVegetarian")
                        .HasColumnType("bit")
                        .HasColumnName("is_vegetarian");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<double?>("Protein")
                        .HasColumnType("float")
                        .HasColumnName("protein");

                    b.Property<double?>("Sodium")
                        .HasColumnType("float")
                        .HasColumnName("sodium");

                    b.Property<double?>("Sugar")
                        .HasColumnType("float")
                        .HasColumnName("sugar");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CoverImageUrlId")
                        .IsUnique();

                    b.ToTable("ingredients", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Domain.Aggregates.SiteUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateJoined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("date_joined")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsRemoved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_removed");

                    b.HasKey("Id");

                    b.ToTable("site_users", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Domain.Entities.Detail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("description");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.ToTable("details", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Domain.Entities.DietaryPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("color");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("emoji");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("dietary_preferences", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Color = "#808080",
                            Description = "No specific dietary preference",
                            Emoji = "❌",
                            Name = "None"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Color = "#4CAF50",
                            Description = "Excludes meat, includes dairy and eggs",
                            Emoji = "🥦",
                            Name = "Vegetarian"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Color = "#8BC34A",
                            Description = "Excludes all animal products",
                            Emoji = "🌱",
                            Name = "Vegan"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Color = "#FF9800",
                            Description = "Excludes gluten-containing grains",
                            Emoji = "🚫🌾",
                            Name = "GlutenFree"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Color = "#03A9F4",
                            Description = "Excludes meat but allows fish",
                            Emoji = "🐟",
                            Name = "Pescatarian"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Color = "#FFEB3B",
                            Description = "Focuses on low-calorie meals",
                            Emoji = "🔥",
                            Name = "LowCalorie"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Color = "#FF5722",
                            Description = "Emphasizes protein-rich foods",
                            Emoji = "💪",
                            Name = "HighProtein"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Color = "#9C27B0",
                            Description = "Limits carbohydrate intake (Keto-friendly)",
                            Emoji = "🥩",
                            Name = "LowCarb"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Color = "#2196F3",
                            Description = "Focuses on reducing fat intake",
                            Emoji = "🥗",
                            Name = "LowFat"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Color = "#E91E63",
                            Description = "Reduces added sugar consumption",
                            Emoji = "🚫🍭",
                            Name = "LowSugar"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Color = "#673AB7",
                            Description = "Emphasizes fiber-rich foods",
                            Emoji = "🌾",
                            Name = "HighFiber"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Color = "#00BCD4",
                            Description = "Focuses on reducing salt intake",
                            Emoji = "🧂🚫",
                            Name = "LowSodium"
                        });
                });

            modelBuilder.Entity("LetWeCook.Domain.Entities.IngredientCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ingredient_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "All types of red and white meat",
                            Name = "Meat"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Description = "Chicken, turkey, duck, and other birds",
                            Name = "Poultry"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Description = "Fish, shellfish, and other seafood",
                            Name = "Seafood"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Description = "All types of eggs used in cooking",
                            Name = "Eggs"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Description = "Milk, cheese, yogurt, and butter",
                            Name = "Dairy"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Description = "Plant-based dairy substitutes like almond milk and soy milk",
                            Name = "Dairy alternatives"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Description = "Fresh, frozen, and canned vegetables",
                            Name = "Vegetables"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Description = "Fresh, dried, and preserved fruits",
                            Name = "Fruits"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Description = "Rice, wheat, oats, and other grains",
                            Name = "Grains"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000a"),
                            Description = "Beans, lentils, chickpeas, and peas",
                            Name = "Legumes"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000b"),
                            Description = "Fresh and dried herbs like basil and parsley",
                            Name = "Herbs"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000c"),
                            Description = "All types of spices such as cinnamon and cumin",
                            Name = "Spices"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000d"),
                            Description = "Cooking oils such as olive oil and vegetable oil",
                            Name = "Oils"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000e"),
                            Description = "Sugar, honey, and artificial sweeteners",
                            Name = "Sweeteners"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000f"),
                            Description = "Non-alcoholic and alcoholic drinks",
                            Name = "Beverages"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Description = "Sauces, dressings, and seasonings",
                            Name = "Condiments"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Description = "Pickled and fermented ingredients like kimchi and miso",
                            Name = "Fermented foods"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Description = "Almonds, cashews, walnuts, and other tree nuts",
                            Name = "Nuts"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Description = "Chia seeds, flaxseeds, sunflower seeds, and others",
                            Name = "Seeds"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Description = "Flour, yeast, baking powder, and cocoa powder",
                            Name = "Baking essentials"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            Description = "Vegetable, chicken, and beef broths or stocks",
                            Name = "Broths and stocks"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            Description = "Fallback category for unspecified ingredients",
                            Name = "Uncategorized"
                        });
                });

            modelBuilder.Entity("LetWeCook.Domain.Entities.MediaUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("MediaType")
                        .HasColumnType("int")
                        .HasColumnName("media_type");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("media_urls", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Domain.Entities.UserDietaryPreference", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_profile_id");

                    b.Property<Guid>("DietaryPreferenceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("dietary_preference_id");

                    b.HasKey("UserProfileId", "DietaryPreferenceId");

                    b.HasIndex("DietaryPreferenceId");

                    b.ToTable("user_dietary_preferences", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Domain.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("bio");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("birth_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("facebook_url");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("instagram_url");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("profile_picture_url");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_profiles", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Infrastructure.Persistence.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SiteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SiteUserId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Infrastructure.Persistence.Models.DetailMediaUrl", b =>
                {
                    b.Property<Guid>("DetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MediaUrlId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DetailId", "MediaUrlId");

                    b.HasIndex("MediaUrlId")
                        .IsUnique();

                    b.ToTable("detail_media_urls", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Domain.Aggregates.Ingredient", b =>
                {
                    b.HasOne("LetWeCook.Domain.Entities.IngredientCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LetWeCook.Domain.Entities.MediaUrl", "CoverImageUrl")
                        .WithOne()
                        .HasForeignKey("LetWeCook.Domain.Aggregates.Ingredient", "CoverImageUrlId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CoverImageUrl");
                });

            modelBuilder.Entity("LetWeCook.Domain.Entities.Detail", b =>
                {
                    b.HasOne("LetWeCook.Domain.Aggregates.Ingredient", null)
                        .WithMany("Details")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LetWeCook.Domain.Entities.UserDietaryPreference", b =>
                {
                    b.HasOne("LetWeCook.Domain.Entities.DietaryPreference", "DietaryPreference")
                        .WithMany()
                        .HasForeignKey("DietaryPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetWeCook.Domain.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DietaryPreference");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("LetWeCook.Domain.Entities.UserProfile", b =>
                {
                    b.HasOne("LetWeCook.Domain.Aggregates.SiteUser", null)
                        .WithOne("Profile")
                        .HasForeignKey("LetWeCook.Domain.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("LetWeCook.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("District")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("district");

                            b1.Property<string>("HouseNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("house_number");

                            b1.Property<string>("ProvinceOrCity")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("province_or_city");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("street");

                            b1.Property<string>("Ward")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("ward");

                            b1.HasKey("UserProfileId");

                            b1.ToTable("user_profiles");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileId");
                        });

                    b.OwnsOne("LetWeCook.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("last_name");

                            b1.HasKey("UserProfileId");

                            b1.ToTable("user_profiles");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("LetWeCook.Infrastructure.Persistence.ApplicationUser", b =>
                {
                    b.HasOne("LetWeCook.Domain.Aggregates.SiteUser", "SiteUser")
                        .WithOne()
                        .HasForeignKey("LetWeCook.Infrastructure.Persistence.ApplicationUser", "SiteUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteUser");
                });

            modelBuilder.Entity("LetWeCook.Infrastructure.Persistence.Models.DetailMediaUrl", b =>
                {
                    b.HasOne("LetWeCook.Domain.Entities.Detail", "Detail")
                        .WithMany()
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetWeCook.Domain.Entities.MediaUrl", "MediaUrl")
                        .WithMany()
                        .HasForeignKey("MediaUrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detail");

                    b.Navigation("MediaUrl");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LetWeCook.Infrastructure.Persistence.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LetWeCook.Infrastructure.Persistence.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetWeCook.Infrastructure.Persistence.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LetWeCook.Infrastructure.Persistence.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LetWeCook.Domain.Aggregates.Ingredient", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("LetWeCook.Domain.Aggregates.SiteUser", b =>
                {
                    b.Navigation("Profile");
                });
#pragma warning restore 612, 618
        }
    }
}
